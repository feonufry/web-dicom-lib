{
    "compilerOptions": {
        /* Source */
        "charset": "utf-8",           // The character set of the input files.
        //"rootDir": "./src",           // Specifies the root directory of input files. Use to control the output directory structure with --outDir.
        // "sourceRoot": "./src",     // Specifies the location where debugger should locate TypeScript files instead of source locations.
        "watch": false,               // Watch input files.
        "preserveWatchOutput": false,   // Keep outdated console output in watch mode instead of clearing the screen.
        //"typeRoots": [],              // Specify list of directories for type definition files to be included.
        // "types": [],               // Type declaration files to be included in compilation.
        "allowJs": false,             // Allow javascript files to be compiled.
        // "disableSizeLimit": true,  // Disable size limit for JavaScript project.

        /* Generation */
        "emitBOM": false,             // Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.
        "newLine": "LF",              // Specifies the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix).
        // "outFile": "",             // Concatenate and emit output to single file.
        // "outDir": "./build",       // Redirect output structure to the directory.

        "diagnostics": false,         // Show diagnostic information.
        "traceResolution": false,     // Enable tracing of the name resolution process.
        "listEmittedFiles": false,    // Enable to list all emitted files.
        "pretty": true,               // Stylize errors and messages using color and context (experimental).
        "listFiles": false,           // Print names of files part of the compilation.

        "noEmit": false,              // Do not emit output.
        "noEmitOnError": true,        // Do not emit outputs if any type checking errors were reported.
        "noEmitHelpers": true,        // Do not generate custom helper functions like __extends in compiled output.

        "target": "es5",              // Specify ECMAScript target version. Permitted values are 'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'es2018' or 'esnext'.
        "noLib": false,               // Do not include the default library file (lib.d.ts).
        "declaration": false,         // Generates corresponding d.ts files.
        //"declarationDir": "./dist",   // Specify output directory for generated declaration files.
        "emitDeclarationOnly": false,   // Only emit '.d.ts' declaration files.
        "stripInternal": true,        // Do not emit declarations for code that has an '@internal' annotation.
        "skipLibCheck": true,         // Skip type checking of declaration files.
        "importHelpers": true,       // Import emit helpers (e.g. '__extends', '__rest', etc..) from tslib.
        "lib": [                      // Specify library file to be included in the compilation. Values: "es5", "es6", "es2015", "es7", "es2016", "es2017", "es2018", "esnext", "dom", "dom.iterable", "webworker", "scripthost", "es2015.core", "es2015.collection", "es2015.generator", "es2015.iterable", "es2015.promise", "es2015.proxy", "es2015.reflect", "es2015.symbol", "es2015.symbol.wellknown", "es2016.array.include", "es2017.object", "es2017.sharedmemory", "es2017.string", "es2017.typedarrays", "es2018.promise", "es2018.regexp", "esnext.array", "esnext.asynciterable"
            "dom",
            "es5",
            "es2015.core",
            "es2015.promise",
            "es2015.collection",
            "esnext.asynciterable"
        ],

        "sourceMap": true,            // Generates corresponding '.map' file.
        "inlineSourceMap": false,     // Emit a single file with source maps instead of having a separate file.
        "inlineSources": false,       // Emit the source alongside the sourcemaps within a single file; requires --inlineSourceMap to be set.
        // "mapRoot": "",             // Specifies the location where debugger should locate map files instead of generated locations.
        //"noResolve": true,            // Do not add triple-slash references or module import targets to the list of compiled files.

        "preserveConstEnums": true,   // Do not erase const enum declarations in generated code.
        // "preserveSymlinks": true,  // Do not resolve symlinks to their real path; treat a symlinked file like a real one.
        "removeComments": true,       // Do not emit comments to output.
        "experimentalDecorators": false,            // Enables experimental support for ES7 decorators.
        "emitDecoratorMetadata": false,             // Emit design-type metadata for decorated declarations in source.
        "noImplicitUseStrict": false, // Do not emit 'use strict' directives in module output.
        "alwaysStrict": true,         // Parse in strict mode and emit 'use strict' for each source file.
        "downlevelIteration": true,   // Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'.

        /* Modules */
        "module": "es2015",           // Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015' or 'esnext'.
        "moduleResolution": "node",   // Specifies module resolution strategy: 'node' (Node) or 'classic' (TypeScript pre 1.6).
        // "isolatedModules": false,  // Unconditionally emit imports for unresolved files.
        // "baseUrl": "",             // Base directory to resolve non-relative module names.
        // "paths": "",               // Specify path mapping to be computed relative to baseUrl option.
        // "rootDirs": [],            // Specify list of root directories to be used when resolving modules.
        "allowSyntheticDefaultImports": true,      // Allow default imports from modules with no default export. This does not affect code emit, just typechecking.
        "esModuleInterop": true,     // Emit '__importStar' and '__importDefault' helpers for runtime babel ecosystem compatibility and enable '--allowSyntheticDefaultImports' for typesystem compatibility.
        // "maxNodeModuleJsDepth": 0, // The maximum dependency depth to search under node_modules and load JavaScript files. Only applicable with --allowJs.

        /* Checks */
        "checkJs": false,             // Report errors in .js files.
        "noImplicitAny": true,        // Warn on expressions and declarations with an implied 'any' type.
        "noImplicitThis": true,       // Raise error on 'this' expressions with an implied any type.
        "noUnusedLocals": true,       // Report errors on unused locals.
        "noUnusedParameters": true,   // Report errors on unused parameters.
        "noStrictGenericChecks": false,             // Disable strict checking of generic signatures in function types.
        // "skipDefaultLibCheck": false,
        "suppressExcessPropertyErrors": false,      // Suppress excess property checks for object literals.
        "suppressImplicitAnyIndexErrors": false,    // Suppress noImplicitAny errors for indexing objects lacking index signatures.
        "allowUnusedLabels": false,   // Do not report errors on unused labels.
        "noImplicitReturns": true,    // Report error when not all code paths in function return a value.
        "noFallthroughCasesInSwitch": true,         // Report errors for fallthrough cases in switch statement.
        "allowUnreachableCode": false,              // Do not report errors on unreachable code.
        "forceConsistentCasingInFileNames": true,   // Disallow inconsistently-cased references to the same file.
        "strictNullChecks": true,    // Enable strict null checks.
        "strict": true,               // Enable all strict type checking options.
        "strictFunctionTypes": true,  // Disable bivariant parameter checking for function types.
        "strictPropertyInitialization": true,       // Ensure non-undefined class properties are initialized in the constructor.

        /* Misc */
        "plugins": []                  // List of TypeScript language server plugins to load.
    },
    "include": [
        "src/**/*"
    ],
    "exclude": [
        "node_modules"
    ]
}
